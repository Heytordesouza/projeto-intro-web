/*Pense em alguma coisa do cotidiano que seja cont√°vel e estruturada. 
Por enquanto, vamos chamar esta coisa de item. Com esse item, n√≥s vamos construir 
nossas l√≥gicas e evoluir no projeto atrav√©s das semanas. 
Pode ser qualquer coisa que possa ser descrita com caracter√≠sticas escritas. 
Alguns exemplos abaixo

1. Para o item que voc√™ decidiu, pense nas caracter√≠sticas que s√£o importantes 
para constru√≠-lo. Vamos usar estas caracter√≠sticas para definir exemplos destes 
objetos usando o c√≥digo. Voc√™ precisar√° criar pelo menos:

  * uma caracter√≠stica String;
  * uma caracter√≠stica Number;
  * uma caracter√≠stica Boolean;
  
Exemplos abaixo
const nome; //string
const idade; //number 
const verificouEmail; //boolean 

Recomendamos, pensando no futuro, que voc√™ tamb√©m pense em dados que podem 
receber m√∫ltiplos valores de uma s√≥ vez. N√£o vamos usar estes dados at√© mais 
pra frente, mas √© legal j√° ter uma ideia.*/

//const modelo = "Modelo do carro"
//const valor = Number "Valor do carro"
//const km = boolean "Se o carro √© 0Km"

/*2. Agora, crie tr√™s conjuntos de vari√°veis utilizando as caracter√≠sticas 
que voc√™ definiu acima. Lembre-se que deve ser o mesmo tipo de item, 
com tr√™s conjuntos de dados diferentes.

Exemplo:
const nome1 = "Fulano";
const idade1 = 33;
const verificouEmail1 = false;

const nome2 = "Sicrano";
const idade2 = 41;
const verificouEmail2 = true;

const nome3 = "Beltrano";
const idade3 = 27;
const verificouEmail3 = true;
_______________________________________________________________________________

const modelo1 = "Chevrolet Onix 1.0 MT"
const valor1 = 78.699
const km1 = true
const cores1 = ["Preto", "Branco", "Cinza", "Prata", "Azul"]

const modelo2 = "Hyundai HB20 Sense 1.0"
const valor2 = 76.699
const km2 = true
const cores2 = ["Preto", "Prata", "Branco", "Cinza"]

const modelo3 = "Renault Logan Authentique Flex 1.0 2018"
const valor3 = 46.367
const km3 = false
const cores3 = ["Preto", "Prata", "Branco", "Vermelho"]

3. Fa√ßa um c√°lculo de m√©dia, entre os valores num√©ricos respectivos de cada item. 
Imprima o valor da m√©dia utilizando um console.log. Guarde este valor em uma const;
üí°A m√©dia deve ser igual √† soma dos itens, dividida pelo total de itens.*/

//const media = ((valor1 + valor2 + valor3)/3)
//console.log(media) //67.255


/*4. Com um console.log, imprima o resultado de uma opera√ß√£o l√≥gica que checa se 
todos os valores de vari√°veis booleanas criadas at√© aqui s√£o verdadeiras.
üí° Exemplo
const verificaEmails = verificouEmail1 && verificouEmail2 && verificouEmail3;
console.log(verificaEmails);*/
// nesse caso, vai imprimir false, pois verificouEmail1 === false*/

//const kms = Boolean(km1 & km2 & km3)
//console.log(kms) //false


/*5. Crie pelo menos mais uma caracter√≠stica para o item que voc√™ criou. 
Esta caracter√≠stica deve ser um array. Mantenha o tipo de dado do array criado sempre o mesmo, 
isto √©, se √© um array de strings, s√≥ deve receber strings.
const nome; //string
const idade; //number
const verificouEmail; //boolean
const projetos; //array de strings*/

//Suas cores

/*6. Exiba um relat√≥rio utilizando console.log(), mostrando todos os dados de 
cada um dos itens criados at√© aqui

  1. O log deve exibir o dado de nome, t√≠tulo ou afim sempre em LETRAS MAI√öSCULAS, como no exemplo abaixo.
FULANO
idade: 33
verificou email?: false
projetos: ["Projeto de HTML", "Projeto de CSS", "Projeto React"]

console.log(`
${modelo1.toUpperCase()}
Valor: R$${valor1}
O Carro √© 0Km? ${km1}
Suas cores s√£o: ${cores1}

${modelo2.toUpperCase()}
Valor: R$${valor2}
O Carro √© 0Km? ${km2}
Suas cores s√£o: ${cores2}

${modelo3.toUpperCase()}
Valor: R$${valor3}
O Carro √© 0Km? ${km3}
Suas cores s√£o: ${cores3}`)

Semana 2

1. Transforme os itens que criamos nas √∫ltimas semanas em objetos.

Exemplo:

//ANTES
const nome1 = "Fulano";
const idade1 = 33;
const verificouEmail1 = false; 
//DEPOIS
objeto1 = { 
  nome: "Fulano", 
  idade: 33,
  verificouEmail: false
} */


carro1 = {
modelo1: "Chevrolet Onix 1.0 MT",
valor1: 78.699,
km1: true,
cores1: ["Preto", "Branco", "Cinza", "Prata", "Azul"]
}

carro2 = {
modelo2: "Hyundai HB20 Sense 1.0",
valor2: 76.699,
km2: true,
cores2: ["Preto", "Prata", "Branco", "Cinza"]
}

carro3 = {
modelo3: "Renault Logan Authentique Flex 1.0 2018",
valor3: 46.367,
km3: false,
cores3: ["Preto", "Prata", "Branco", "Vermelho"]
}


//2. Crie um array para guardar os objetos. Este array deve estar vazio, por enquanto;

const carros = []


/*3. Adicione os objetos criados no item 1 ao array de objetos criado no item 2, 
utilizando o push()

Ao fim, voc√™ deve ter algo parecido com isso:
[
  { 
    nome: "Fulano", 
    idade: 33,
    verificouEmail: false
  },
  { 
    nome: "Beltrano", 
    idade: 41,
    verificouEmail: true
  },
  { 
    nome: "Fulano", 
    idade: 27,
    verificouEmail: true
  },
]*/

//carros.push(carro1, carro2, carro3)

//console.log(carros)

/*4. Altere o item ‚ÄúAdicione os novos objetos no array de objetos, 
utilizando o push()‚Äù (item 3), para criar uma verifica√ß√£o antes de dar o push. 
A carater√≠stica booleana do objeto deve ser validada. 
Isto √©, o objeto s√≥ deve ser adicionado ao array se a propriedade booleana for true;

5. Crie uma condi√ß√£o else, que, em caso de valor false na condi√ß√£o acima, 
exiba um **ALERT** avisando para o usu√°rio que o item n√£o foi adicionado, e n√£o fa√ßa o push*/

if(carro1.km1) {
  carros.push(carro1)
  alert(`${carro1.modelo1} foi adicionado ao array`)
}else {
  alert(`${carro1.modelo1} n√£o foi adicionado ao array`)
}

if(carro2.km2) {
  carros.push(carro2)
  alert(`${carro2.modelo2} foi adicionado ao array`)
}else {
  alert(`${carro2.modelo2} n√£o foi adicionado ao array`)
}

if(carro3.km3) {
  carros.push(carro3)
  alert(`${carro3.modelo3} foi adicionado ao array`)
}else {
  alert(`${carro3.modelo3} n√£o foi adicionado ao array`)
}

